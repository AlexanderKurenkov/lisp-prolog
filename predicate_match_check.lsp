; ==================================================================
; проверка элемента списка на соответствие предикату
; ==================================================================
; предикат is-number проверяет, является ли атом 'n' числом
(defun is-number (n) (typep n 'number))

; проверяет список x, на наличие элемента, удовлетворяющего предикату p
(defun exists (p x)
  ; Если список является пустым и ни один из элементов не удовлетворяет предикату,
  ; то возвращает nil (ложь).
  (if (null x)
    nil
    ; Если список не является пустым, то функционал funcall
    ; применяет функциональный аргумент 'p' к голове списка 'x'.
    (if (funcall p (car x))
        ; возращает t (истина), если голова списка 'x' удовлетворяет предикату 'p'
        t
        ; рекурсивный вызов предиката exists с хвостом списка в качестве аргумента
        (exists p (cdr x)))))

(print "Тестирование функции exists: (exists #'is-number '(a 1 b c))")
(print (exists #'is-number '(a 1 b c))) ; T
(print "Тестирование функции exists: (exists #'is-number '(a b c))")
(print (exists #'is-number '(a b c)))	; NIL